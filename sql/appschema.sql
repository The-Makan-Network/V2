CREATE TABLE IF NOT EXISTS allusers (
userid varchar(16) not null unique,
phoneno bigint primary key,
password varchar(12) not null,
);


CREATE TABLE IF NOT EXISTS products (
productid INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) primary key,
sellerid varchar(16) not null,
name varchar(64) not null,
description varchar(256) not null,
price decimal not null check(price>0),
category varchar(32) constraint category CHECK(category = 'dessert' OR category='ready meals' OR category='pastries' OR category='drinks'),
allergen varchar(32) not null,
minorder int not null check(minorder>=0),
foreign key(sellerid) references allusers(userid),
unique(productid, sellerid)
);

CREATE TABLE IF NOT EXISTS transactions (
orderid INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) primary key,
b_id varchar(16) not null,
s_id varchar(16) not null,
p_id int references products(productid),
qty int not null check(qty>0),
delivery varchar(12) not null check(delivery='self pickup' OR delivery='delivery'),
status varchar(10) not null check(status='pending' OR status='confirmed'),
foreign key(b_id) references allusers(userid),
foreign key(s_id, p_id) references products(sellerid, productid),
check(not b_id = s_id)
);


CREATE TABLE IF NOT EXISTS buyers (
b_id varchar(16) primary key
);


CREATE OR REPLACE FUNCTION new_buyer()
  RETURNS trigger AS
$$
BEGIN
         INSERT INTO buyers(b_id)
         VALUES(NEW.b_id) on conflict do nothing;
 
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER update_buyers
  AFTER INSERT
  ON transactions
  FOR EACH ROW
  EXECUTE PROCEDURE new_buyer();


CREATE TABLE IF NOT EXISTS sellers (
s_id varchar(16) primary key
);

CREATE OR REPLACE FUNCTION new_seller()
  RETURNS trigger AS
$$
BEGIN
         INSERT INTO sellers(s_id)
         VALUES(NEW.sellerid) on conflict do nothing;
 
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER update_sellers
  AFTER INSERT
  ON products
  FOR EACH ROW
  EXECUTE PROCEDURE new_seller();


--TRIGGER TO CHANGE STATUS
CREATE OR REPLACE FUNCTION updatestatus()
RETURNS trigger AS
$$
declare
	total INT;
	minord INT;

BEGIN
	select sum(qty) from transactions where p_id=new.p_id into total;
	select minorder from products where productid=new.p_id into minord;
	if total >= minord then 
	UPDATE transactions SET status = 'confirmed' WHERE p_id = new.p_id;
	RETURN new; 
	end if;
	RETURN new;
END;
$$
 LANGUAGE 'plpgsql';

CREATE TRIGGER statusupdate
AFTER INSERT
ON transactions
FOR EACH ROW
EXECUTE PROCEDURE updatestatus();
